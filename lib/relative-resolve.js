// Generated by CoffeeScript 2.0.0-beta8
void function () {
  var canonicalise, CORE_MODULES, fs, isCore, path, resolve, resolvePath;
  fs = require('fs');
  path = require('path');
  resolve = require('resolve').sync;
  CORE_MODULES = require('./core-modules');
  isCore = require('./is-core');
  canonicalise = require('./canonicalise');
  resolvePath = function (param$) {
    var aliases, cache$, corePath, cwd, e, extensions, root;
    var givenPath;
    {
      cache$ = param$;
      extensions = cache$.extensions;
      aliases = cache$.aliases;
      root = cache$.root;
      cwd = cache$.cwd;
      givenPath = cache$.path;
    }
    if (null != aliases)
      aliases;
    else
      aliases = {};
    if (isCore(givenPath)) {
      if ({}.hasOwnProperty.call(aliases, givenPath))
        return;
      corePath = CORE_MODULES[givenPath];
      if (!fs.existsSync(corePath)) {
        console.log('Core module "' + givenPath + '" has not yet been ported to the browser');
        return;
      }
      givenPath = corePath;
    }
    try {
      return resolve(givenPath, {
        extensions: extensions,
        basedir: cwd || root
      });
    } catch (e$) {
      e = e$;
      try {
        return resolve(path.join(root, givenPath), { extensions: extensions });
      } catch (e$1) {
        e = e$1;
        throw new Error('Cannot find module "' + givenPath + '" in "' + root + '"');
      }
    }
  };
  module.exports = function (param$) {
    var alias, aliases, cache$, canonicalName, cwd, extensions, givenPath, resolved, root;
    {
      cache$ = param$;
      extensions = cache$.extensions;
      aliases = cache$.aliases;
      root = cache$.root;
      cwd = cache$.cwd;
      givenPath = cache$.path;
    }
    if (null != aliases)
      aliases;
    else
      aliases = {};
    resolved = resolvePath({
      extensions: extensions,
      aliases: aliases,
      root: root,
      cwd: cwd,
      path: givenPath
    });
    canonicalName = isCore(givenPath) ? givenPath : canonicalise(root, resolved);
    while ({}.hasOwnProperty.call(aliases, '/' + canonicalName) || {}.hasOwnProperty.call(aliases, canonicalName)) {
      alias = aliases['/' + canonicalName] || aliases[canonicalName];
      resolved = alias ? resolvePath({
        extensions: extensions,
        aliases: aliases,
        root: root,
        path: alias
      }) : void 0;
      if (!resolved)
        break;
      canonicalName = canonicalise(root, resolved);
    }
    return {
      filename: resolved,
      canonicalName: canonicalName
    };
  };
}.call(this);
