// Generated by CoffeeScript 2.0.0-beta4
void function () {
  var CoffeeScript, esprima, estraverse, EXTENSIONS, fs, path, PRELUDE, relativeResolve, resolve, resolvePath, wrap;
  path = require('path');
  fs = require('fs');
  resolve = require('resolve');
  esprima = require('esprima');
  estraverse = require('estraverse');
  CoffeeScript = require('coffee-script-redux');
  EXTENSIONS = [
    '.js',
    '.coffee',
    '.json'
  ];
  PRELUDE = "function require(file){\n  if({}.hasOwnProperty.call(require.cache, file))\n    return require.cache[file];\n\n  var resolved = require.resolve(file);\n  if(!resolved)\n    throw new Error('Failed to resolve module ' + file);\n\n  var process = {\n    title: 'browser',\n    browser: true,\n    env: {},\n    argv: [],\n    nextTick: function(fn){ setTimeout(fn, 0); },\n    cwd: function(){ return '/'; },\n    chdir: function(){}\n  };\n  var module$ = {\n    id: file,\n    require: require,\n    filename: file,\n    exports: {},\n    loaded: false,\n    parent: null,\n    children: []\n  };\n  var dirname = file.slice(0, file.lastIndexOf('/') + 1);\n  resolved.call(module$.exports, module$, module$.exports, dirname, file, process);\n  module$.loaded = true;\n  return require.cache[file] = module$.exports;\n}\n\nrequire.modules = {};\nrequire.cache = {};\n\nrequire.resolve = function(file){\n  return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0;\n};\nrequire.define = function(file, fn){ require.modules[file] = fn; };";
  wrap = function (name, program) {
    return {
      type: 'ExpressionStatement',
      expression: {
        type: 'CallExpression',
        callee: {
          type: 'MemberExpression',
          computed: false,
          object: {
            type: 'Identifier',
            name: 'require'
          },
          property: {
            type: 'Identifier',
            name: 'define'
          }
        },
        'arguments': [
          {
            type: 'Literal',
            value: name
          },
          {
            type: 'FunctionExpression',
            id: null,
            params: [
              {
                type: 'Identifier',
                name: 'module'
              },
              {
                type: 'Identifier',
                name: 'exports'
              },
              {
                type: 'Identifier',
                name: '__dirname'
              },
              {
                type: 'Identifier',
                name: '__filename'
              },
              {
                type: 'Identifier',
                name: 'process'
              }
            ],
            defaults: [],
            body: {
              type: 'BlockStatement',
              body: program.body
            }
          }
        ]
      }
    };
  };
  resolvePath = function (root, givenPath, cwd) {
    var e;
    try {
      return resolve.sync(givenPath, {
        basedir: cwd || root,
        extensions: EXTENSIONS
      });
    } catch (e$) {
      e = e$;
      return resolve.sync(path.join(root, givenPath), { extensions: EXTENSIONS });
    }
  };
  exports.relativeResolve = relativeResolve = function (root, givenPath, cwd) {
    var resolvedPath;
    resolvedPath = resolvePath(root, givenPath, cwd);
    if (fs.existsSync(resolvedPath)) {
      return '/' + path.relative(root, resolvedPath);
    } else {
      return resolvedPath;
    }
  };
  exports.cjsify = function (entryPoint, root, options) {
    var ast, cache$, canonicalName, ext, extname, fileContents, filename, handler, handlers, outputProgram, processed, source, worklist;
    if (null == root)
      root = path.cwd();
    if (null == options)
      options = {};
    if (null != options.aliases)
      options.aliases;
    else
      options.aliases = {};
    handlers = {
      '.coffee': function (coffee, canonicalName) {
        return CoffeeScript.compile(CoffeeScript.parse(coffee, { raw: true }), { bare: true });
      },
      '.json': function (json, canonicalName) {
        return esprima.parse('module.exports = ' + json, {
          loc: true,
          source: canonicalName
        });
      }
    };
    for (ext in cache$ = null != options.handlers ? options.handlers : {}) {
      if (!isOwn$(cache$, ext))
        continue;
      handler = cache$[ext];
      handlers[ext] = handler;
    }
    worklist = [path.resolve(entryPoint)];
    processed = {};
    while (worklist.length) {
      filename = worklist.pop();
      canonicalName = relativeResolve(root, filename);
      if ({}.hasOwnProperty.call(processed, canonicalName))
        continue;
      if ({}.hasOwnProperty.call(options.aliases, canonicalName))
        filename = resolve.sync('./' + options.aliases[canonicalName], {
          basedir: root,
          extensions: EXTENSIONS
        });
      if (resolve.isCore(filename)) {
        filename = path.resolve(path.join(__dirname, '..', 'core', '' + filename + '.js'));
        if (!fs.existsSync(filename))
          filename = path.resolve(path.join(__dirname, '..', 'core', 'undefined.js'));
      }
      extname = path.extname(filename);
      fileContents = fs.readFileSync(filename);
      processed[canonicalName] = ast = {}.hasOwnProperty.call(handlers, extname) ? handlers[extname](fileContents, canonicalName) : esprima.parse(fileContents, {
        loc: true,
        source: canonicalName
      });
      if (null != ast.loc)
        ast.loc;
      else
        ast.loc = {};
      ast.loc.source = path.relative(root, filename);
      estraverse.replace(ast, {
        enter: function (node, parents) {
          if (!(node.type === 'CallExpression' && node.callee.type === 'Identifier' && node.callee.name === 'require'))
            return;
          if (!(node['arguments'].length === 1))
            badRequireError(filename, node, '`require` must be given exactly one argument');
          if (!(node['arguments'][0].type === 'Literal' && typeof node['arguments'][0].value === 'string'))
            badRequireError(filename, node, 'argument of `require` must be a constant string');
          worklist.push(resolvePath(root, node['arguments'][0].value, path.dirname(filename)));
          return {
            type: 'CallExpression',
            callee: node.callee,
            'arguments': [{
                type: 'Literal',
                value: relativeResolve(root, node['arguments'][0].value, path.dirname(filename))
              }]
          };
        }
      });
    }
    outputProgram = esprima.parse(PRELUDE);
    for (canonicalName in processed) {
      if (!isOwn$(processed, canonicalName))
        continue;
      ast = processed[canonicalName];
      source = ast.loc.source;
      ast = wrap(canonicalName, ast);
      estraverse.traverse(ast, {
        enter: function (node) {
          if (null != node.loc)
            node.loc.source = source;
        }
      });
      outputProgram.body.push(ast);
    }
    if (null != options['export'])
      outputProgram.body.push({
        type: 'ExpressionStatement',
        expression: {
          type: 'AssignmentExpression',
          operator: '=',
          left: {
            type: 'MemberExpression',
            computed: true,
            object: {
              type: 'Identifier',
              name: 'global'
            },
            property: {
              type: 'Literal',
              value: options['export']
            }
          },
          right: {
            type: 'CallExpression',
            callee: {
              type: 'Identifier',
              name: 'require'
            },
            'arguments': [{
                type: 'Literal',
                value: relativeResolve(root, entryPoint)
              }]
          }
        }
      });
    outputProgram.body = [{
        type: 'ExpressionStatement',
        expression: {
          type: 'CallExpression',
          callee: {
            type: 'FunctionExpression',
            params: [{
                type: 'Identifier',
                name: 'global'
              }],
            body: {
              type: 'BlockStatement',
              body: outputProgram.body
            }
          },
          'arguments': [{ type: 'ThisExpression' }]
        }
      }];
    return outputProgram;
  };
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
}.call(this);
